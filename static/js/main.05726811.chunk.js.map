{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js","contexts/newlogo.png"],"names":["bookReducer","state","action","type","title","book","seller","price","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","length","className","src","newlogo","BookDetails","onClick","BookList","map","key","NewBookForm","useState","setTitle","setSeller","setPrice","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2MAEaA,EAAc,SAACC,EAAOC,GAC/B,OAAOA,EAAOC,MACV,IAAK,WACD,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CACdG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,MAAOL,EAAOG,KAAKE,MACnBC,GAAIC,SAGZ,IAAK,cACD,OAAOR,EAAMS,QAAO,SAAAL,GAAI,OAAIA,EAAKG,KAAON,EAAOM,MAEnD,QACI,OAAOP,ICdNU,EAAcC,0BAkBZC,EAhBa,SAACC,GAAS,IAAD,EACRC,qBAAWf,EAAa,IAAK,WAClD,IAAMgB,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHd,mBAC3BK,EAD2B,KACpBC,EADoB,KASjC,OAHAC,qBAAU,WACNN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC/C,CAACA,IAEC,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACjCR,EAAMc,W,gBCSJC,EApBA,WAAO,IACZR,EAAUS,qBAAWnB,GAArBU,MACN,OAAOA,EAAMU,OAET,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,MACV,gDACA,iDAAuBb,EAAMU,OAA7B,uBAKL,yBAAKC,UAAU,UACf,yBAAKC,IAAKC,MACV,kDCLQC,EAXK,SAAC,GAAY,IAAX9B,EAAU,EAAVA,KACViB,EAAYQ,qBAAWnB,GAAvBW,SACR,OACI,wBAAIc,QAAS,kBAAKd,EAAS,CAACnB,KAAM,cAAeK,GAAIH,EAAKG,OACtD,yBAAKwB,UAAU,SAAS3B,EAAKD,OAC7B,yBAAK4B,UAAU,UAAU3B,EAAKC,QAC9B,yBAAK0B,UAAU,SAAS3B,EAAKE,SCa1B8B,EAjBE,WAAO,IACdhB,EAASS,qBAAWnB,GAApBU,MACN,OAAOA,EAAMU,OACT,yBAAKC,UAAU,aACX,4BACKX,EAAMiB,KAAI,SAAAjC,GACP,OAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAMkC,IAAKlC,EAAKG,UAKtD,yBAAKwB,UAAU,SAAQ,kEACvB,oECeMQ,EA5BK,WAAO,IAChBlB,EAAUQ,qBAAWnB,GAArBW,SADe,EAEGmB,mBAAS,IAFZ,mBAEhBrC,EAFgB,KAETsC,EAFS,OAGKD,mBAAS,IAHd,mBAGhBnC,EAHgB,KAGRqC,EAHQ,OAIGF,mBAAS,IAJZ,mBAIhBlC,EAJgB,KAITqC,EAJS,KActB,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACFzB,EAAS,CAACnB,KAAM,WAAYE,KAAM,CAC9BD,QAAOE,SAAQC,WAEnBmC,EAAS,IACTC,EAAU,IACVC,EAAS,MAIL,2BAAOzC,KAAK,OAAO6C,YAAY,aAAarB,MAAOvB,EACnD6C,SAAU,SAACH,GAAD,OAAOJ,EAASI,EAAEI,OAAOvB,QAAQwB,UAAQ,IACnD,2BAAOhD,KAAK,OAAO6C,YAAY,cAAcrB,MAAOrB,EACpD2C,SAAU,SAACH,GAAD,OAAOH,EAAUG,EAAEI,OAAOvB,QAAQwB,UAAQ,IACpD,2BAAOhD,KAAK,OAAO6C,YAAY,aAAarB,MAAOpB,EACnD0C,SAAU,SAACH,GAAD,OAAOF,EAASE,EAAEI,OAAOvB,QAAQwB,UAAQ,IACnD,2BAAOhD,KAAK,SAASwB,MAAM,eCPxByB,MAZf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.05726811.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\r\n\r\nexport const bookReducer = (state, action) =>{\r\n    switch(action.type){\r\n        case 'ADD_BOOK':\r\n            return [...state, {\r\n                title: action.book.title,\r\n                seller: action.book.seller,\r\n                price: action.book.price,\r\n                id: uuid()\r\n            }]\r\n        \r\n        case 'REMOVE_BOOK':\r\n            return state.filter(book => book.id !== action.id)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { bookReducer } from '../reducers/bookReducer';\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props)=>{\r\n   const [books, dispatch] = useReducer(bookReducer, [] , ()=>{\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : []\r\n\r\n    });\r\n    useEffect(()=>{\r\n        localStorage.setItem('books', JSON.stringify(books))\r\n    },[books]);\r\n    return(\r\n        <BookContext.Provider value={{ books, dispatch}}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    );\r\n}\r\n\r\nexport default BookContextProvider;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport newlogo from '../contexts/newlogo.png'\r\n\r\nconst Navbar = () => {\r\n  const { books } = useContext(BookContext);\r\n    return books.length ? ( \r\n      \r\n        <div className=\"navbar\">\r\n            <img src={newlogo} />\r\n            <h1>Gcelt Books List</h1>\r\n            <p>Currently you have {books.length}  books to sell !!</p>\r\n        </div>\r\n        \r\n     ):(\r\n       \r\n       <div className=\"navbar\">\r\n       <img src={newlogo} />\r\n       <h1>Gcelt Books List</h1>\r\n       </div>\r\n       \r\n     )\r\n}\r\n \r\nexport default Navbar;","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nconst BookDetails = ({book}) => {\r\n    const { dispatch }= useContext(BookContext);\r\n    return ( \r\n        <li onClick={()=> dispatch({type: 'REMOVE_BOOK', id: book.id})}>\r\n            <div className=\"title\">{book.title}</div>\r\n            <div className=\"seller\">{book.seller}</div>\r\n            <div className=\"price\">{book.price}</div>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default BookDetails;","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookDetails from './BookDetails'\r\n\r\nconst BookList = () => {\r\n   const {books} = useContext(BookContext)\r\n    return books.length ? ( \r\n        <div className=\"book-list\">\r\n            <ul>\r\n                {books.map(book =>{\r\n                    return( <BookDetails book={book} key={book.id} /> );\r\n                })}\r\n            </ul>\r\n        </div>\r\n     ) : (\r\n         <div className=\"empty\"><h1>âš  Your sell-list is empty !! </h1>\r\n         <p>Start Selling Your Used Books here!</p>\r\n         </div>\r\n     )\r\n}\r\n \r\nexport default BookList;","import React, {useContext, useState} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst NewBookForm = () => {\r\n    const {dispatch}=useContext(BookContext);\r\n    const[title, setTitle] = useState('');\r\n    const[seller, setSeller] = useState('');\r\n    const[price, setPrice] = useState('');\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        dispatch({type: 'ADD_BOOK', book: {\r\n            title, seller, price\r\n        }});\r\n        setTitle('');\r\n        setSeller('');\r\n        setPrice('');\r\n    }\r\n    return ( \r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"book title\" value={title}\r\n            onChange={(e) => setTitle(e.target.value)} required/>\r\n            <input type=\"text\" placeholder=\"seller name\" value={seller}\r\n            onChange={(e) => setSeller(e.target.value)} required/>\r\n            <input type=\"text\" placeholder=\"book price\" value={price}\r\n            onChange={(e) => setPrice(e.target.value)} required/>\r\n            <input type=\"submit\" value=\"add book\" />\r\n            \r\n        </form>\r\n     );\r\n}\r\n \r\nexport default NewBookForm;","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/BookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList/>\n        <NewBookForm />\n      </BookContextProvider>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/newlogo.f90bc743.png\";"],"sourceRoot":""}